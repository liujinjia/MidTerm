	/**
	 * 1)	Say you have Given a string which consists of lowercase or uppercase letters, 
	 * find the length of the longest palindromes that can be built with those letters.
	This is case sensitive, for example "Aa" is not considered a palindrome here.
	public int longestPalindrome(String s) {
		// finish your code inside.
	}
	*/

	public int longestPalindrome(String s) {
		if (s == null) return 0;
		int result = 0;
		int single_num = 0;
		char[] store_arr = new char[128];
		for (int i = 0; i < 128; i++){
			store_arr[i] = 0;
		}
		char[] arr = s.toCharArray();
		for (int i = 0; i < arr.length; i++){
			int ascii = arr[i];
			store_arr[ascii]++;  
		}
		for (int i = 0; i < 128; i++){
			if (store_arr[i] >= 2){
				if(store_arr[i] % 2 == 1){
					single_num = 1;
				}
				int temp = store_arr[i] / 2;
				result += (temp * 2);
			}
			if(store_arr[i] == 1){
				single_num = 1;
			}
		}
		
		return result + single_num;
	}

		
		
	
	/**2)	an array for which the ith element is the price of a given stock on day i.
	 *  Design an algorithm to find the maximum profit.
	 *   You may complete as many transactions as you like 
	 *   (ie, buy one and sell one share of the stock multiple times).
	 *    However, you may not engage in multiple transactions at the same time 
	 *    (ie, you must sell the stock before you buy again).
	*/
	public int maxProfit(int[] prices) {  
    	if (prices.length <= 1) return 0;  
    	int result = 0;  
   		for (int i = 1; i < prices.length; i++) {  
        		int profit = prices[i] - prices[i - 1];  
        		if (profit > 0) {  
            		result += profit;  
        		}  
    	}         
    	return result;  
	}
	/**3)	Given a column title as appear in an Excel sheet, 
	 * return its corresponding column number.
			For example: A -> 1, B -> 2, … Z -> 26, AA -> 27, AB -> 28
		*/
			
			public int titleToNumber(String title) {
				int result = 0;
				if (title == null || title == "") return result;
				char[] arr = title.toCharArray();
				for (int i = 0; i < arr.length; i++) {
					double temp = Math.pow(26, (arr.length - i - 1));
					int incre = (int) temp;
					result += incre * ((int) arr[i] - 64);
				}
				System.out.println(result);
				return result;
			}
		
			

	
	/**BONUS (15 points)
	Given an unsorted array of integers(no duplicates), count the pairs in which there are two numbers and they add up to a specific target number. The array is given as follows:
	For example:
	Input: nums={2, 7, 11, 15}, target=9, there is one pair {2,7} so return: 1
	Input: nums={2, 7, 11, 15}, target=10, there is no pair so return 0.
	Input: nums={1,5,2,4,3,6}, target=7, there is are three pairs {1,6}, {2,5}, {3,4} so return 3.
	Note: {1,2} and {2,1} are regarded as the same pair.
	More-Bonus: If you can do it in O(N) time, you will get extra 5 points.
	*/
		public int twoSum(int[] nums, int target) {
			// finish your code inside.
			nums = mySort(nums);
			int count = 0;
			int j = nums.length - 1;
			int i = 0;
			while (i < j){
				if(nums[i] + nums[j] == target){
					count++;
					i++;
					j--;
				}
				else if(nums[i] + nums[j] > target){
					j--;
				}
				else {
					i++;
				}
			}
			System.out.print(count);
			return count;
		}
			public int[] mySort(int[] nums){
				int[] result = new int[nums.length];
				int[] bu = new int[10000];
				for(int i = 0; i < nums.length; i++){
					bu[nums[i]] = 1;
				}
				int index = 0;
				for(int i = 0; i < bu.length; i++){
					if(bu[i] == 1){
						result[index++] = i;
					}
				}
				return result;
			}
		
		